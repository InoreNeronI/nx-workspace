@use 'sass:map';

@import 'font', 'icon';

/*=============== Theme variables ===============*/
// Forest
$forest: (
  'dark': #838149,
  'light': #588349,
) !default;
// Fire
$fire: (
  'dark': #834949,
  'light': #ff8c00,
) !default;
// Earth
$earth: (
  'dark': #5c4637,
  'light': #e0c39a,
) !default;
// Air
$air: (
  'dark': #27374f,
  'light': #a3b9c8,
) !default;
// Water
$water: (
  'dark': #005e74,
  'light': #00bcd4,
) !default;
// High contrast
$high: (
  'dark': #222,
  'light': #fff,
) !default;

/*=============== Other variables ===============*/
$cursor-action: pointer;
$line-height-default: 1.4;

/* Photon
  @see https://github.com/connors/photon */
@import 'photonkit/sass/mixins', 'mixins/responsive-layout',
  'mixins/responsive-layout-theme';

:root {
  @import 'photonkit/sass/appify';
  // THEMING
  // Forest
  @if variable-exists(forest) and variable-exists(forest) {
    &.inset.forest {
      @include responsive-layout-theme(
        #{map.get($forest, 'dark')},
        #{map.get($forest, 'light')}
      );
      @include responsive-layout();
    }
    &.reverse.forest {
      @include responsive-layout-theme(
        #{map.get($forest, 'light')},
        #{map.get($forest, 'dark')}
      );
      @include responsive-layout();
    }
  }
  // Fire
  @if variable-exists(fire) and variable-exists(fire) {
    &.inset.fire {
      @include responsive-layout-theme(
        #{map.get($fire, 'dark')},
        #{map.get($fire, 'light')}
      );
      @include responsive-layout();
    }
    &.reverse.fire {
      @include responsive-layout-theme(
        #{map.get($fire, 'light')},
        #{map.get($fire, 'dark')}
      );
      @include responsive-layout();
    }
  }
  // Earth
  @if variable-exists(earth) and variable-exists(earth) {
    &.inset.earth {
      @include responsive-layout-theme(
        #{map.get($earth, 'dark')},
        #{map.get($earth, 'light')}
      );
      @include responsive-layout();
    }
    &.reverse.earth {
      @include responsive-layout-theme(
        #{map.get($earth, 'light')},
        #{map.get($earth, 'dark')}
      );
      @include responsive-layout();
    }
  }
  // Air
  @if variable-exists(air) and variable-exists(air) {
    &.inset.air {
      @include responsive-layout-theme(
        #{map.get($air, 'dark')},
        #{map.get($air, 'light')}
      );
      @include responsive-layout();
    }
    &.reverse.air {
      @include responsive-layout-theme(
        #{map.get($air, 'light')},
        #{map.get($air, 'dark')}
      );
      @include responsive-layout();
    }
  }
  // Water
  @if variable-exists(water) and variable-exists(water) {
    &.inset.water {
      @include responsive-layout-theme(
        #{map.get($water, 'dark')},
        #{map.get($water, 'light')}
      );
      @include responsive-layout();
    }
    &.reverse.water {
      @include responsive-layout-theme(
        #{map.get($water, 'light')},
        #{map.get($water, 'dark')}
      );
      @include responsive-layout();
    }
  }
  // High contrast
  @if variable-exists(high) and variable-exists(high) {
    &.inset.high {
      @include responsive-layout-theme(
        #{map.get($high, 'dark')},
        #{map.get($high, 'light')}
      );
      @include responsive-layout();
    }
    &.reverse.high {
      @include responsive-layout-theme(
        #{map.get($high, 'light')},
        #{map.get($high, 'dark')}
      );
      @include responsive-layout();
    }
  }
  .btn {
    cursor: $cursor-action;
    display: inline-block;
    padding: 3px 8px;
    margin-bottom: 0;
    font-size: $font-size-default;
    line-height: $line-height-default;
    text-align: center;
    white-space: nowrap;
    vertical-align: middle;
    &:focus {
      outline: none;
      box-shadow: none;
    }
    &.icon {
      float: left;
      padding-left: 0.6rem;
      img {
        vertical-align: text-top;
      }
    }
    * {
      cursor: $cursor-action;
      font-size: $font-size-default;
    }
    i {
      vertical-align: middle;
    }
    span {
      font-family: $font-family-default;
      vertical-align: text-bottom;
    }
  }
  // Normal screen size
  &.normal {
    .btn {
      &.icon {
        align-items: center;
        display: flex;
        max-width: unset;
      }
      span {
        margin-left: 0.5rem;
        visibility: visible;
      }
    }
    header .title {
      visibility: visible;
    }
    .sidebar {
      .nav-group-title {
        visibility: visible;
      }
      .nav-group-item {
        padding: initial;
        span {
          visibility: visible;
        }
      }
    }
    footer {
      line-height: 1;
      visibility: visible;
    }
  }
  // Fullscreen size
  &.fullscreen {
    .btn {
      &.icon {
        max-width: 2.25rem;
      }
      span {
        visibility: hidden;
      }
    }
    header .title {
      position: absolute;
      visibility: hidden;
    }
    .sidebar {
      min-width: 2.75rem;
      .nav-group {
        .nav-group-title {
          height: 0;
          padding: 0;
          visibility: hidden;
        }
        .nav-group-item {
          padding: 0 0.7rem;
          span {
            visibility: hidden;
          }
        }
        .nav-group-divisor {
          margin: 0;
          visibility: hidden;
        }
      }
    }
    footer {
      line-height: 0;
      visibility: hidden;
    }
  }
}
